{
  "address": "0x5B8E3dDA489F0eDCb83BF4714ee5131BcaA0b96B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "int256",
          "name": "_initialAnswer",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "int256",
          "name": "current",
          "type": "int256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        }
      ],
      "name": "AnswerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "startedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        }
      ],
      "name": "NewRound",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "authoriseDataProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorisedDataProviders",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "getAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "getTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        }
      ],
      "name": "setData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xe465efb4bb808e213366c47dc5d9a8126e39a38299c8ec30b630c9a8f712b96f",
  "receipt": {
    "to": null,
    "from": "0x4ec0dda0430A54b4796109913545F715B2d89F34",
    "contractAddress": "0x5B8E3dDA489F0eDCb83BF4714ee5131BcaA0b96B",
    "transactionIndex": 1,
    "gasUsed": "943202",
    "logsBloom": "0x
    "blockHash": "0xfa78df5d77b10fbd184a64b571ac2caf0630b719b8ed44c1b3fdcdfbd2646d14",
    "transactionHash": "0xe465efb4bb808e213366c47dc5d9a8126e39a38299c8ec30b630c9a8f712b96f",
    "logs": [],
    "blockNumber": 412834,
    "cumulativeGasUsed": "943202",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "CRV",
    "90000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "0eeffa96a6edb70290f8f44b1a0c12f9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"_initialAnswer\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"int256\",\"name\":\"current\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"}],\"name\":\"AnswerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"startedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"}],\"name\":\"NewRound\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"authoriseDataProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorisedDataProviders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ChainlinkMockOracle.sol\":\"ChainlinkMockOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xb496651006b9a2a07920ffe116928b11e2a6458e21361cecca51409522488ca7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0x4a7757ff7bbafe044cd49c2a45c7c18ec50eff7c7af6869face5e1e9cda976f2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/ChainlinkMockOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport {AggregatorV2V3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\\\";\\n\\ncontract ChainlinkMockOracle is AggregatorV2V3Interface {\\n    struct Round {\\n        int256 answer;\\n        uint256 startedAt;\\n        uint256 updatedAt;\\n        uint80 answeredInRound;\\n    }\\n\\n    Round[] _rounds;\\n    string public description;\\n    mapping(address => bool) public authorisedDataProviders;\\n\\n    constructor(string memory _description, int256 _initialAnswer) {\\n        description = _description;\\n        authoriseDataProvider(msg.sender, true);\\n        setData(_initialAnswer);\\n    }\\n\\n    function setData(int answer) public {\\n        require(\\n            authorisedDataProviders[msg.sender],\\n            \\\"Not authorised data provider\\\"\\n        );\\n        _rounds.push(\\n            Round({\\n                answer: answer,\\n                startedAt: block.timestamp,\\n                updatedAt: block.timestamp,\\n                answeredInRound: uint80(_rounds.length)\\n            })\\n        );\\n    }\\n\\n    function authoriseDataProvider(address provider, bool status) public {\\n        authorisedDataProviders[provider] = status;\\n    }\\n\\n    function decimals() external pure returns (uint8) {\\n        return 8;\\n    }\\n\\n    function version() external pure returns (uint256) {\\n        return 0;\\n    }\\n\\n    // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n    // if they do not have data to report, instead of returning unset values\\n    // which could be misinterpreted as actual reported values.\\n    function getRoundData(uint80 _roundId)\\n        public\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        if (_rounds.length == 0 || _rounds.length < _roundId) {\\n            revert(\\\"No data present\\\");\\n        }\\n\\n        Round memory _round = _rounds[_roundId];\\n        return (\\n            _roundId,\\n            _round.answer,\\n            _round.startedAt,\\n            _round.updatedAt,\\n            _round.answeredInRound\\n        );\\n    }\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        return getRoundData(uint80(_rounds.length - 1));\\n    }\\n\\n    function latestTimestamp() external view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    function getAnswer(uint256 roundId) external view returns (int256) {\\n        return _rounds[roundId].answer;\\n    }\\n\\n    function getTimestamp(uint256 roundId) external view returns (uint256) {\\n        return _rounds[roundId].startedAt;\\n    }\\n\\n    function latestAnswer() external view returns (int256) {\\n        (, int256 answer, , ,) = getRoundData(uint80(_rounds.length - 1));\\n\\n        return answer;\\n    }\\n\\n    function latestRound() external view returns (uint256) {\\n        uint256 length = _rounds.length;\\n        if(length == 0) return 0;\\n        \\n        return _rounds.length - 1;\\n    }\\n}\\n\",\"keccak256\":\"0x7bd27e6c11a7e1b072121ba8aebd287517fcf2d6b97d47c72355823ce79b5497\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200152a3803806200152a8339818101604052810190620000379190620003e0565b816001908162000048919062000691565b506200005c3360016200007560201b60201c565b6200006d81620000d060201b60201c565b5050620007fb565b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166200015f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200015690620007d9565b60405180910390fd5b6000604051806080016040528083815260200142815260200142815260200160008054905069ffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff160217905550505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200027b8262000230565b810181811067ffffffffffffffff821117156200029d576200029c62000241565b5b80604052505050565b6000620002b262000212565b9050620002c0828262000270565b919050565b600067ffffffffffffffff821115620002e357620002e262000241565b5b620002ee8262000230565b9050602081019050919050565b60005b838110156200031b578082015181840152602081019050620002fe565b60008484015250505050565b60006200033e6200033884620002c5565b620002a6565b9050828152602081018484840111156200035d576200035c6200022b565b5b6200036a848285620002fb565b509392505050565b600082601f8301126200038a576200038962000226565b5b81516200039c84826020860162000327565b91505092915050565b6000819050919050565b620003ba81620003a5565b8114620003c657600080fd5b50565b600081519050620003da81620003af565b92915050565b60008060408385031215620003fa57620003f96200021c565b5b600083015167ffffffffffffffff8111156200041b576200041a62000221565b5b620004298582860162000372565b92505060206200043c85828601620003c9565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200049957607f821691505b602082108103620004af57620004ae62000451565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620005197fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620004da565b620005258683620004da565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620005726200056c62000566846200053d565b62000547565b6200053d565b9050919050565b6000819050919050565b6200058e8362000551565b620005a66200059d8262000579565b848454620004e7565b825550505050565b600090565b620005bd620005ae565b620005ca81848462000583565b505050565b5b81811015620005f257620005e6600082620005b3565b600181019050620005d0565b5050565b601f82111562000641576200060b81620004b5565b6200061684620004ca565b8101602085101562000626578190505b6200063e6200063585620004ca565b830182620005cf565b50505b505050565b600082821c905092915050565b6000620006666000198460080262000646565b1980831691505092915050565b600062000681838362000653565b9150826002028217905092915050565b6200069c8262000446565b67ffffffffffffffff811115620006b857620006b762000241565b5b620006c4825462000480565b620006d1828285620005f6565b600060209050601f831160018114620007095760008415620006f4578287015190505b62000700858262000673565b86555062000770565b601f1984166200071986620004b5565b60005b8281101562000743578489015182556001820191506020850194506020810190506200071c565b868310156200076357848901516200075f601f89168262000653565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b7f4e6f7420617574686f726973656420646174612070726f766964657200000000600082015250565b6000620007c1601c8362000778565b9150620007ce8262000789565b602082019050919050565b60006020820190508181036000830152620007f481620007b2565b9050919050565b610d1f806200080b6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638205bf6a1161008c578063b633620c11610066578063b633620c1461021c578063da358a3c1461024c578063dfb2853c14610268578063feaf968c14610284576100cf565b80638205bf6a1461019a5780639a6fc8f5146101b8578063b5ab58dc146101ec576100cf565b8063313ce567146100d457806350d25bcd146100f257806354fd4d5014610110578063668a0f021461012e5780637238845a1461014c5780637284e4161461017c575b600080fd5b6100dc6102a6565b6040516100e99190610735565b60405180910390f35b6100fa6102af565b6040516101079190610769565b60405180910390f35b6101186102d9565b604051610125919061079d565b60405180910390f35b6101366102de565b604051610143919061079d565b60405180910390f35b6101666004803603810190610161919061081b565b610314565b6040516101739190610863565b60405180910390f35b610184610334565b604051610191919061090e565b60405180910390f35b6101a26103c2565b6040516101af919061079d565b60405180910390f35b6101d260048036038101906101cd9190610972565b6103ca565b6040516101e39594939291906109ae565b60405180910390f35b61020660048036038101906102019190610a2d565b6104f0565b6040516102139190610769565b60405180910390f35b61023660048036038101906102319190610a2d565b61051e565b604051610243919061079d565b60405180910390f35b61026660048036038101906102619190610a86565b61054c565b005b610282600480360381019061027d9190610adf565b61068b565b005b61028c6106e6565b60405161029d9594939291906109ae565b60405180910390f35b60006008905090565b6000806102cc60016000805490506102c79190610b4e565b6103ca565b5050509150508091505090565b600090565b6000806000805490509050600081036102fb576000915050610311565b600160008054905061030d9190610b4e565b9150505b90565b60026020528060005260406000206000915054906101000a900460ff1681565b6001805461034190610bb1565b80601f016020809104026020016040519081016040528092919081815260200182805461036d90610bb1565b80156103ba5780601f1061038f576101008083540402835291602001916103ba565b820191906000526020600020905b81548152906001019060200180831161039d57829003601f168201915b505050505081565b600042905090565b60008060008060008060008054905014806103f557508569ffffffffffffffffffff16600080549050105b15610435576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042c90610c2e565b60405180910390fd5b6000808769ffffffffffffffffffff168154811061045657610455610c4e565b5b90600052602060002090600402016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900469ffffffffffffffffffff1669ffffffffffffffffffff1669ffffffffffffffffffff16815250509050868160000151826020015183604001518460600151955095509550955095505091939590929450565b600080828154811061050557610504610c4e565b5b9060005260206000209060040201600001549050919050565b600080828154811061053357610532610c4e565b5b9060005260206000209060040201600101549050919050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166105d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cf90610cc9565b60405180910390fd5b6000604051806080016040528083815260200142815260200142815260200160008054905069ffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff160217905550505050565b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600080600080600061070860016000805490506107039190610b4e565b6103ca565b945094509450945094509091929394565b600060ff82169050919050565b61072f81610719565b82525050565b600060208201905061074a6000830184610726565b92915050565b6000819050919050565b61076381610750565b82525050565b600060208201905061077e600083018461075a565b92915050565b6000819050919050565b61079781610784565b82525050565b60006020820190506107b2600083018461078e565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107e8826107bd565b9050919050565b6107f8816107dd565b811461080357600080fd5b50565b600081359050610815816107ef565b92915050565b600060208284031215610831576108306107b8565b5b600061083f84828501610806565b91505092915050565b60008115159050919050565b61085d81610848565b82525050565b60006020820190506108786000830184610854565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156108b857808201518184015260208101905061089d565b60008484015250505050565b6000601f19601f8301169050919050565b60006108e08261087e565b6108ea8185610889565b93506108fa81856020860161089a565b610903816108c4565b840191505092915050565b6000602082019050818103600083015261092881846108d5565b905092915050565b600069ffffffffffffffffffff82169050919050565b61094f81610930565b811461095a57600080fd5b50565b60008135905061096c81610946565b92915050565b600060208284031215610988576109876107b8565b5b60006109968482850161095d565b91505092915050565b6109a881610930565b82525050565b600060a0820190506109c3600083018861099f565b6109d0602083018761075a565b6109dd604083018661078e565b6109ea606083018561078e565b6109f7608083018461099f565b9695505050505050565b610a0a81610784565b8114610a1557600080fd5b50565b600081359050610a2781610a01565b92915050565b600060208284031215610a4357610a426107b8565b5b6000610a5184828501610a18565b91505092915050565b610a6381610750565b8114610a6e57600080fd5b50565b600081359050610a8081610a5a565b92915050565b600060208284031215610a9c57610a9b6107b8565b5b6000610aaa84828501610a71565b91505092915050565b610abc81610848565b8114610ac757600080fd5b50565b600081359050610ad981610ab3565b92915050565b60008060408385031215610af657610af56107b8565b5b6000610b0485828601610806565b9250506020610b1585828601610aca565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b5982610784565b9150610b6483610784565b9250828203905081811115610b7c57610b7b610b1f565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610bc957607f821691505b602082108103610bdc57610bdb610b82565b5b50919050565b7f4e6f20646174612070726573656e740000000000000000000000000000000000600082015250565b6000610c18600f83610889565b9150610c2382610be2565b602082019050919050565b60006020820190508181036000830152610c4781610c0b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e6f7420617574686f726973656420646174612070726f766964657200000000600082015250565b6000610cb3601c83610889565b9150610cbe82610c7d565b602082019050919050565b60006020820190508181036000830152610ce281610ca6565b905091905056fea264697066735822122094fecc7237a785d8a5aa99f8ab7a8fa68963f79a6fd856eb39d6575d7cb5d2d064736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638205bf6a1161008c578063b633620c11610066578063b633620c1461021c578063da358a3c1461024c578063dfb2853c14610268578063feaf968c14610284576100cf565b80638205bf6a1461019a5780639a6fc8f5146101b8578063b5ab58dc146101ec576100cf565b8063313ce567146100d457806350d25bcd146100f257806354fd4d5014610110578063668a0f021461012e5780637238845a1461014c5780637284e4161461017c575b600080fd5b6100dc6102a6565b6040516100e99190610735565b60405180910390f35b6100fa6102af565b6040516101079190610769565b60405180910390f35b6101186102d9565b604051610125919061079d565b60405180910390f35b6101366102de565b604051610143919061079d565b60405180910390f35b6101666004803603810190610161919061081b565b610314565b6040516101739190610863565b60405180910390f35b610184610334565b604051610191919061090e565b60405180910390f35b6101a26103c2565b6040516101af919061079d565b60405180910390f35b6101d260048036038101906101cd9190610972565b6103ca565b6040516101e39594939291906109ae565b60405180910390f35b61020660048036038101906102019190610a2d565b6104f0565b6040516102139190610769565b60405180910390f35b61023660048036038101906102319190610a2d565b61051e565b604051610243919061079d565b60405180910390f35b61026660048036038101906102619190610a86565b61054c565b005b610282600480360381019061027d9190610adf565b61068b565b005b61028c6106e6565b60405161029d9594939291906109ae565b60405180910390f35b60006008905090565b6000806102cc60016000805490506102c79190610b4e565b6103ca565b5050509150508091505090565b600090565b6000806000805490509050600081036102fb576000915050610311565b600160008054905061030d9190610b4e565b9150505b90565b60026020528060005260406000206000915054906101000a900460ff1681565b6001805461034190610bb1565b80601f016020809104026020016040519081016040528092919081815260200182805461036d90610bb1565b80156103ba5780601f1061038f576101008083540402835291602001916103ba565b820191906000526020600020905b81548152906001019060200180831161039d57829003601f168201915b505050505081565b600042905090565b60008060008060008060008054905014806103f557508569ffffffffffffffffffff16600080549050105b15610435576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042c90610c2e565b60405180910390fd5b6000808769ffffffffffffffffffff168154811061045657610455610c4e565b5b90600052602060002090600402016040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900469ffffffffffffffffffff1669ffffffffffffffffffff1669ffffffffffffffffffff16815250509050868160000151826020015183604001518460600151955095509550955095505091939590929450565b600080828154811061050557610504610c4e565b5b9060005260206000209060040201600001549050919050565b600080828154811061053357610532610c4e565b5b9060005260206000209060040201600101549050919050565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166105d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cf90610cc9565b60405180910390fd5b6000604051806080016040528083815260200142815260200142815260200160008054905069ffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548169ffffffffffffffffffff021916908369ffffffffffffffffffff160217905550505050565b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600080600080600061070860016000805490506107039190610b4e565b6103ca565b945094509450945094509091929394565b600060ff82169050919050565b61072f81610719565b82525050565b600060208201905061074a6000830184610726565b92915050565b6000819050919050565b61076381610750565b82525050565b600060208201905061077e600083018461075a565b92915050565b6000819050919050565b61079781610784565b82525050565b60006020820190506107b2600083018461078e565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107e8826107bd565b9050919050565b6107f8816107dd565b811461080357600080fd5b50565b600081359050610815816107ef565b92915050565b600060208284031215610831576108306107b8565b5b600061083f84828501610806565b91505092915050565b60008115159050919050565b61085d81610848565b82525050565b60006020820190506108786000830184610854565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156108b857808201518184015260208101905061089d565b60008484015250505050565b6000601f19601f8301169050919050565b60006108e08261087e565b6108ea8185610889565b93506108fa81856020860161089a565b610903816108c4565b840191505092915050565b6000602082019050818103600083015261092881846108d5565b905092915050565b600069ffffffffffffffffffff82169050919050565b61094f81610930565b811461095a57600080fd5b50565b60008135905061096c81610946565b92915050565b600060208284031215610988576109876107b8565b5b60006109968482850161095d565b91505092915050565b6109a881610930565b82525050565b600060a0820190506109c3600083018861099f565b6109d0602083018761075a565b6109dd604083018661078e565b6109ea606083018561078e565b6109f7608083018461099f565b9695505050505050565b610a0a81610784565b8114610a1557600080fd5b50565b600081359050610a2781610a01565b92915050565b600060208284031215610a4357610a426107b8565b5b6000610a5184828501610a18565b91505092915050565b610a6381610750565b8114610a6e57600080fd5b50565b600081359050610a8081610a5a565b92915050565b600060208284031215610a9c57610a9b6107b8565b5b6000610aaa84828501610a71565b91505092915050565b610abc81610848565b8114610ac757600080fd5b50565b600081359050610ad981610ab3565b92915050565b60008060408385031215610af657610af56107b8565b5b6000610b0485828601610806565b9250506020610b1585828601610aca565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b5982610784565b9150610b6483610784565b9250828203905081811115610b7c57610b7b610b1f565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610bc957607f821691505b602082108103610bdc57610bdb610b82565b5b50919050565b7f4e6f20646174612070726573656e740000000000000000000000000000000000600082015250565b6000610c18600f83610889565b9150610c2382610be2565b602082019050919050565b60006020820190508181036000830152610c4781610c0b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e6f7420617574686f726973656420646174612070726f766964657200000000600082015250565b6000610cb3601c83610889565b9150610cbe82610c7d565b602082019050919050565b60006020820190508181036000830152610ce281610ca6565b905091905056fea264697066735822122094fecc7237a785d8a5aa99f8ab7a8fa68963f79a6fd856eb39d6575d7cb5d2d064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 121,
        "contract": "contracts/ChainlinkMockOracle.sol:ChainlinkMockOracle",
        "label": "_rounds",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_struct(Round)117_storage)dyn_storage"
      },
      {
        "astId": 123,
        "contract": "contracts/ChainlinkMockOracle.sol:ChainlinkMockOracle",
        "label": "description",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 127,
        "contract": "contracts/ChainlinkMockOracle.sol:ChainlinkMockOracle",
        "label": "authorisedDataProviders",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Round)117_storage)dyn_storage": {
        "base": "t_struct(Round)117_storage",
        "encoding": "dynamic_array",
        "label": "struct ChainlinkMockOracle.Round[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Round)117_storage": {
        "encoding": "inplace",
        "label": "struct ChainlinkMockOracle.Round",
        "members": [
          {
            "astId": 110,
            "contract": "contracts/ChainlinkMockOracle.sol:ChainlinkMockOracle",
            "label": "answer",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 112,
            "contract": "contracts/ChainlinkMockOracle.sol:ChainlinkMockOracle",
            "label": "startedAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 114,
            "contract": "contracts/ChainlinkMockOracle.sol:ChainlinkMockOracle",
            "label": "updatedAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 116,
            "contract": "contracts/ChainlinkMockOracle.sol:ChainlinkMockOracle",
            "label": "answeredInRound",
            "offset": 0,
            "slot": "3",
            "type": "t_uint80"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint80": {
        "encoding": "inplace",
        "label": "uint80",
        "numberOfBytes": "10"
      }
    }
  }
}