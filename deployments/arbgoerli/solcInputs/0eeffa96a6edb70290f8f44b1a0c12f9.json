{
  "language": "Solidity",
  "sources": {
    "contracts/ChainlinkMockOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\nimport {AggregatorV2V3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\";\n\ncontract ChainlinkMockOracle is AggregatorV2V3Interface {\n    struct Round {\n        int256 answer;\n        uint256 startedAt;\n        uint256 updatedAt;\n        uint80 answeredInRound;\n    }\n\n    Round[] _rounds;\n    string public description;\n    mapping(address => bool) public authorisedDataProviders;\n\n    constructor(string memory _description, int256 _initialAnswer) {\n        description = _description;\n        authoriseDataProvider(msg.sender, true);\n        setData(_initialAnswer);\n    }\n\n    function setData(int answer) public {\n        require(\n            authorisedDataProviders[msg.sender],\n            \"Not authorised data provider\"\n        );\n        _rounds.push(\n            Round({\n                answer: answer,\n                startedAt: block.timestamp,\n                updatedAt: block.timestamp,\n                answeredInRound: uint80(_rounds.length)\n            })\n        );\n    }\n\n    function authoriseDataProvider(address provider, bool status) public {\n        authorisedDataProviders[provider] = status;\n    }\n\n    function decimals() external pure returns (uint8) {\n        return 8;\n    }\n\n    function version() external pure returns (uint256) {\n        return 0;\n    }\n\n    // getRoundData and latestRoundData should both raise \"No data present\"\n    // if they do not have data to report, instead of returning unset values\n    // which could be misinterpreted as actual reported values.\n    function getRoundData(uint80 _roundId)\n        public\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        if (_rounds.length == 0 || _rounds.length < _roundId) {\n            revert(\"No data present\");\n        }\n\n        Round memory _round = _rounds[_roundId];\n        return (\n            _roundId,\n            _round.answer,\n            _round.startedAt,\n            _round.updatedAt,\n            _round.answeredInRound\n        );\n    }\n\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        )\n    {\n        return getRoundData(uint80(_rounds.length - 1));\n    }\n\n    function latestTimestamp() external view returns (uint256) {\n        return block.timestamp;\n    }\n\n    function getAnswer(uint256 roundId) external view returns (int256) {\n        return _rounds[roundId].answer;\n    }\n\n    function getTimestamp(uint256 roundId) external view returns (uint256) {\n        return _rounds[roundId].startedAt;\n    }\n\n    function latestAnswer() external view returns (int256) {\n        (, int256 answer, , ,) = getRoundData(uint80(_rounds.length - 1));\n\n        return answer;\n    }\n\n    function latestRound() external view returns (uint256) {\n        uint256 length = _rounds.length;\n        if(length == 0) return 0;\n        \n        return _rounds.length - 1;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AggregatorInterface.sol\";\nimport \"./AggregatorV3Interface.sol\";\n\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n\n  function latestTimestamp() external view returns (uint256);\n\n  function latestRound() external view returns (uint256);\n\n  function getAnswer(uint256 roundId) external view returns (int256);\n\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}